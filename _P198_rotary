//#######################################################################################################
//##################### Plugin 198: Rotary encoder with switch (under development) ######################
//#######################################################################################################

#define PLUGIN_198
#define PLUGIN_ID_198         1
#define PLUGIN_NAME_198       "Rotary encoder with switch"
#define PLUGIN_VALUENAME1_198 "Switch"
#define PLUGIN_VALUENAME2_198 "Rotation"

boolean Plugin_198(byte function, struct EventStruct *event, String& string)
{
  boolean success = false;
  static byte switchstate[TASKS_MAX];
  static byte outputstate[TASKS_MAX];

  switch (function)
  {
    case PLUGIN_DEVICE_ADD:
      {
        Device[++deviceCount].Number = PLUGIN_ID_198;
        Device[deviceCount].Type = DEVICE_TYPE_SINGLE;
        Device[deviceCount].VType = SENSOR_TYPE_SWITCH;
        Device[deviceCount].Ports = 0;
        Device[deviceCount].PullUpOption = true;
        Device[deviceCount].InverseLogicOption = true;
        Device[deviceCount].FormulaOption = false;
        Device[deviceCount].ValueCount = 2;
        Device[deviceCount].SendDataOption = true;
        Device[deviceCount].TimerOption = true;
        Device[deviceCount].TimerOptional = true;
        Device[deviceCount].GlobalSyncOption = true;
        break;
      }

    case PLUGIN_GET_DEVICENAME:
      {
        string = F(PLUGIN_NAME_198);
        break;
      }

    case PLUGIN_GET_DEVICEVALUENAMES:
      {
        strcpy_P(ExtraTaskSettings.TaskDeviceValueNames[0], PSTR(PLUGIN_VALUENAME1_198));
        strcpy_P(ExtraTaskSettings.TaskDeviceValueNames[1], PSTR(PLUGIN_VALUENAME2_198));
        break;
      }

    case PLUGIN_INIT:
      { // 1=switch, 2=rotary pin A, 3=rotary pin B
        Plugin_198_init = true;
        pinMode(Settings.TaskDevicePin1[event->TaskIndex], INPUT_PULLUP);
        pinMode(Settings.TaskDevicePin2[event->TaskIndex], INPUT_PULLUP);
        pinMode(Settings.TaskDevicePin3[event->TaskIndex], INPUT_PULLUP);
        attachInterrupt(Settings.TaskDevicePin1[event->TaskIndex], Plugin_198_interrupt1, FALLING);
        attachInterrupt(Settings.TaskDevicePin2[event->TaskIndex], Plugin_198_interrupt2, FALLING);
        //attachInterrupt(Settings.TaskDevicePin3[event->TaskIndex], Plugin_198_interrupt3, FALLING);
        success = true;
        break;
      }

    case PLUGIN_TEN_PER_SECOND:
      {
        if (Plugin_198_init)
        {
          //switch code goes here
          byte state = digitalRead(Settings.TaskDevicePin1[event->TaskIndex]);
          if (state != switchstate[event->TaskIndex])
          {
            switchstate[event->TaskIndex] = state;
            byte currentOutputState = outputstate[event->TaskIndex];
            if (state == 1)
              outputstate[event->TaskIndex] = !outputstate[event->TaskIndex];
            sendData(event);
            success = true;
            break;          
          }
          
          //rotary encoder code goes here, from http://playground.arduino.cc/Main/RotaryEncoders#Example1; see below for interrupt code
          n = digitalRead(Settings.TaskDevicePin2[event->TaskIndex]);
          if ((encoder0PinALast == LOW) && (n == HIGH)) 
          {
            UserVar[event->BaseVarIndex + 1] = 0;
            if (digitalRead(Settings.TaskDevicePin3[event->TaskIndex]) == LOW)
            {
              UserVar[event->BaseVarIndex + 1]--;
            } 
            else 
            {
              UserVar[event->BaseVarIndex + 1]++;
            }
            //Serial.print (encoder0Pos);
            //Serial.print ("/");
          } 
          encoder0PinALast = n;
          sendData(event);
          success = true;
        }
        break;        
      }

    case PLUGIN_READ:
      {
        // We do not actually read the pin state as this is already done 10x/second
        // Instead we just send the last known state stored in Uservar
        String log = F("SW   : State ");
        log += UserVar[event->BaseVarIndex];
        addLog(LOG_LEVEL_INFO, log);
        success = true;
        break;
      }

    case PLUGIN_TIMER_IN:
      {
        digitalWrite(event->Par1, event->Par2);
        setPinState(PLUGIN_ID_198, event->Par1, PIN_MODE_OUTPUT, event->Par2);
        break;
      }
  }
  return success;
}

//interrupt not implemented yet
