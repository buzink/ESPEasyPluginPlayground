//#######################################################################################################
//##################### Plugin 198: Rotary encoder (under development) ######################
//#######################################################################################################

#define PLUGIN_198
#define PLUGIN_ID_198         198
#define PLUGIN_NAME_198       "Rotary encoder"
#define PLUGIN_VALUENAME1_198 "Rotation"

boolean Plugin_198(byte function, struct EventStruct *event, String& string)
{
  boolean success = false;
  static int Plugin_198_n;
  static int Plugin_198_encoder0PinALast;

  switch (function)
  {
    case PLUGIN_DEVICE_ADD:
      {
        Device[++deviceCount].Number = PLUGIN_ID_198;
        Device[deviceCount].Type = DEVICE_TYPE_DUAL;
        Device[deviceCount].VType = SENSOR_TYPE_SINGLE;
        Device[deviceCount].Ports = 0;
        Device[deviceCount].PullUpOption = true;
        Device[deviceCount].FormulaOption = false;
        Device[deviceCount].ValueCount = 1;
        Device[deviceCount].SendDataOption = true;
        break;
      }

    case PLUGIN_GET_DEVICENAME:
      {
        string = F(PLUGIN_NAME_198);
        break;
      }

    case PLUGIN_GET_DEVICEVALUENAMES:
      {
        strcpy_P(ExtraTaskSettings.TaskDeviceValueNames[0], PSTR(PLUGIN_VALUENAME1_198));
        break;
      }

    case PLUGIN_INIT:
      { // 1=rotary pin A, 2=rotary pin B
        //Plugin_198_init = true;
        pinMode(Settings.TaskDevicePin1[event->TaskIndex], INPUT_PULLUP);
        pinMode(Settings.TaskDevicePin2[event->TaskIndex], INPUT_PULLUP);
        //attachInterrupt(Settings.TaskDevicePin1[event->TaskIndex], Plugin_198_interrupt1, FALLING);
        success = true;
        break;
      }

    case PLUGIN_TEN_PER_SECOND:
      {
          //rotary encoder code goes here, from http://playground.arduino.cc/Main/RotaryEncoders#Example1; see below for interrupt code
          Plugin_198_n = digitalRead(Settings.TaskDevicePin1[event->TaskIndex]);
          if ((Plugin_198_encoder0PinALast == LOW) && (Plugin_198_n == HIGH)) 
          {
            UserVar[event->BaseVarIndex] = 0;
            if (digitalRead(Settings.TaskDevicePin2[event->TaskIndex]) == LOW)
            {
              UserVar[event->BaseVarIndex]--;
            } 
            else 
            {
              UserVar[event->BaseVarIndex]++;
            }
            //Serial.print (UserVar[event->BaseVarIndex]);
            //Serial.print ("/");
          } 
          Plugin_198_encoder0PinALast = Plugin_198_n;
          sendData(event);
          success = true;
          break;        
      }

    case PLUGIN_READ:
      {
        // We do not actually read the pin state as this is already done 10x/second
        // Instead we just send the last known state stored in Uservar
        String log = F("SW   : State ");
        log += UserVar[event->BaseVarIndex];
        addLog(LOG_LEVEL_INFO, log);
        success = true;
        break;
      }
  }
  return success;
}

//interrupt not implemented yet
